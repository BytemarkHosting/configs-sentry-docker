version: '3.4'
# See https://docs.docker.com/compose/overview/ for more information.

# If you make changes to this file or any related files, apply them by
# navigating to the directory that holds this file and run this as root:
#   docker-compose down; docker-compose up -d

x-defaults: &defaults
  restart: unless-stopped
  build: .
  depends_on:
    - redis
    - postgres
    - memcached
    - mail
  environment:
    SENTRY_SECRET_KEY: ${SENTRY_SECRET_KEY}
    SENTRY_MEMCACHED_HOST: memcached
    SENTRY_REDIS_HOST: redis
    SENTRY_POSTGRES_HOST: postgres
    SENTRY_EMAIL_HOST: mail
    SENTRY_SERVER_EMAIL: ${SENTRY_SERVER_EMAIL}
  volumes:
    - sentry-data:/var/lib/sentry/files

services:
  # Traefik is a reverse proxy. It handles SSL and passes traffic to
  # Docker containers via rules you define in docker-compose labels.
  # Its dashboard is at http://example.com/traefik/ (behind a login).
  traefik:
    # https://hub.docker.com/_/traefik/
    image: traefik:latest
    command: --api --docker --acme.email="${ACME_EMAIL}"
    restart: always
    networks:
      - frontend
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Access to Docker
      - ./traefik.toml:/traefik.toml              # Traefik configuration
      - ./acme.json:/acme.json                    # SSL certificates
    ports:
      # Map port 80 and 443 on the host to this container.
      - "80:80"
      - "443:443"
    labels:
      - "traefik.docker.network=frontend"
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:${TRAEFIK_DOMAINS}; PathPrefixStrip:/traefik"
      - "traefik.port=8080"
      - "traefik.protocol=http"
      # Remove next line to disable login prompt for the dashboard.
      - "traefik.frontend.auth.basic=${BASIC_AUTH}"

  # Watchtower detects if any linked containers have an new image
  # available, automatically updating & restarting them if needed.
  watchtower:
    # https://hub.docker.com/r/centurylink/watchtower/
    image: v2tec/watchtower:latest
    # https://github.com/v2tec/watchtower#options
    # This schedule applies updates (if available) at midnight.
    command: --cleanup --schedule "0 0 0 * * *"
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # This allows Sentry to send email straight out of the box without
  # having to rely on an external provider like SendGrid or MailGun.
  # It makes an SMTP host available at the hostname "mail".
  mail:
    image: bytemark/smtp
    restart: always
    networks:
      - frontend
      - backend

  memcached:
    image: memcached:1.4
    restart: always
    networks:
      - backend

  redis:
    image: redis:3.2-alpine
    restart: always
    networks:
      - backend

  postgres:
    # https://hub.docker.com/_/postgres/
    # Specify 9.5 as we only want watchtower to apply minor updates
    # (eg, 9.5.1) and not major updates (eg, 9.6).
    image: postgres:9.5
    restart: always
    environment:
      SENTRY_DB_NAME: ${SENTRY_DB_NAME}
      SENTRY_DB_USER: ${SENTRY_DB_USER}
      SENTRY_DB_PASSWORD: ${SENTRY_DB_PASSWORD}
    networks:
      - backend
    volumes:
      # Ensure the database persists between restarts.
      - sentry-postgres:/var/lib/postgresql/data

  web:
    <<: *defaults
    networks:
      - frontend
      - backend
    labels:
      - "traefik.docker.network=frontend"
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:${SENTRY_DOMAINS}"
      - "traefik.port=9000"
      - "traefik.protocol=http"
      # Uncomment the next line to enable HSTS header.
      #- "traefik.frontend.headers.STSSeconds=15768000"

  cron:
    <<: *defaults
    command: run cron
    networks:
      - backend

  worker:
    <<: *defaults
    command: run worker
    networks:
      - backend

# Create two networks: one for front-end containers that we'll make
# publicly accessible to the internet, and one for private back-end.
networks:
  frontend:
  backend:

# Create persistent Docker volumes to preserve important data.
# We don't want our data to be lost when restarting containers.
volumes:
  sentry-data:
  sentry-postgres:


